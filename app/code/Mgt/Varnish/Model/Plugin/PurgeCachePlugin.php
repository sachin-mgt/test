<?php
 namespace Mgt\Varnish\Model\Plugin; use Zend\Uri\Uri; class PurgeCachePlugin extends \Magento\CacheInvalidate\Model\PurgeCache { const REQUEST_TIMEOUT = 5; protected $coreLogger; protected $logger; protected $varnishConfig; protected $urlCollection; protected $objectManager; protected static $tagsRegistry = []; public function __construct(\Magento\PageCache\Model\Cache\Server $cacheServer, \Magento\CacheInvalidate\Model\SocketFactory $socketAdapterFactory, \Mgt\Varnish\Model\Cache\Config $varnishConfig, \Mgt\Varnish\Model\ResourceModel\Url\Collection $urlCollection, \Magento\Framework\ObjectManagerInterface $objectManager, \Psr\Log\LoggerInterface $coreLogger, \Mgt\Varnish\Model\Logger\Logger $logger) { goto d4fa7; C3d1d: $this->socketAdapterFactory = $socketAdapterFactory; goto Cb652; F01df: $this->urlCollection = $urlCollection; goto d594b; Adb4a: $this->logger = $logger; goto d7fbf; d594b: $this->coreLogger = $coreLogger; goto Adb4a; Cb652: $this->varnishConfig = $varnishConfig; goto D81cf; d4fa7: $this->cacheServer = $cacheServer; goto C3d1d; D81cf: $this->objectManager = $objectManager; goto F01df; d7fbf: } public function sendPurgeRequest($tagsPattern) { goto F4656; b5451: $this->logMessage($logMessage); goto a8b22; efd70: if ($tags) { goto C16c5; } goto b96d7; E2aad: $logMessage = sprintf("\x56\141\162\x6e\151\x73\150\x20\x43\141\143\x68\145\x20\x70\x75\162\147\x65\144\40\x62\x79\x20\146\x6f\154\154\157\x77\x69\156\147\40\164\x61\x67\x73\x3a\x20\x25\163", print_r($tags, true)); goto a79a7; F99d1: D6462: goto Adc65; F160e: Cf64a: goto e8a3e; Ea972: $headers = [self::HEADER_X_MAGENTO_TAGS_PATTERN => $tagsPattern]; goto c66c5; da8e4: $this->addToQueue($tags); goto c25ac; D386b: if (true === is_array($tagsPattern)) { goto Cf64a; } goto fb573; a8b22: return true; goto f2072; Adc65: B3afc: goto a6b2d; Ece5d: f2b73: goto E2aad; c2ec3: $tagsPattern = []; goto D1b98; b96d7: return true; goto A9907; E613b: D516a: goto Ea972; cbdff: $pattern = "\x28\50\136\x7c\x2c\x29\45\163\50\x2c\174\44\x29\51"; goto c2ec3; e8a3e: foreach ($tagsPattern as $tag) { goto aed51; d09b8: $tags[] = $tag; goto e3fa2; B94b2: A6813: goto A2a40; e3fa2: self::$tagsRegistry[$tag] = $tag; goto a3746; aed51: if (isset(self::$tagsRegistry[$tag])) { goto d1844; } goto d09b8; a3746: d1844: goto B94b2; A2a40: } goto C58fb; a6b2d: goto D516a; goto F160e; c66c5: $this->_sendPurgeRequest($headers); goto e5d82; a79a7: $tagsPattern = implode("\x7c", array_unique($tagsPattern)); goto E613b; A9907: C16c5: goto cbdff; C58fb: faa26: goto efd70; aa7b4: switch ($tagsPattern) { case "\56\52": $logMessage = "\124\150\145\x20\x77\150\157\x6c\x65\x20\x56\x61\162\x6e\151\x73\x68\x20\103\141\x63\x68\145\40\x68\141\163\x20\142\x65\x65\x6e\x20\x70\165\162\147\x65\144"; goto B3afc; } goto F99d1; Ae0ad: if (!(true === $isCacheWarmerEnabled)) { goto C9515; } goto da8e4; fb573: $logMessage = ''; goto aa7b4; e5d82: $isCacheWarmerEnabled = $this->varnishConfig->isCacheWarmerEnabled(); goto Ae0ad; c25ac: C9515: goto b5451; F4656: $tags = []; goto D386b; D1b98: foreach ($tags as $tag) { $tagsPattern[] = sprintf($pattern, $tag); F6b97: } goto Ece5d; f2072: } public function addToQueue(array $tags) { goto C91bd; C91bd: if (!count($tags)) { goto ec920; } goto Baa48; Baa48: try { goto a6eeb; f6ab8: foreach ($this->urlCollection as $url) { $urls[] = ["\163\164\157\162\145\x5f\x69\144" => $url->getStoreId(), "\x70\x61\x74\150" => $url->getPath(), "\x70\162\x69\x6f\x72\151\164\x79" => \Mgt\Varnish\Model\UrlQueue::PRIORITY_HIGH]; F9d53: } goto b066d; C92ef: $urlQueue = $this->objectManager->create("\115\x67\164\134\x56\x61\x72\156\151\x73\150\134\115\x6f\144\x65\x6c\x5c\x55\x72\154\121\165\145\165\145"); goto daf51; D7d9e: if (!count($urls)) { goto E986f; } goto C92ef; Be59d: E986f: goto Facad; daf51: $urlQueue->addToQueue($urls); goto Be59d; ad3e9: $this->urlCollection->addTagsFilter($tags); goto f6ab8; b066d: Ee002: goto D7d9e; a6eeb: $urls = []; goto ad3e9; Facad: } catch (\Exception $e) { $errorMessage = sprintf("\x41\156\40\145\x72\162\157\x72\40\x6f\x63\x63\x75\x72\162\145\144\40\144\165\162\151\156\147\x20\141\144\x64\x69\x6e\147\40\164\157\x20\161\165\145\x75\x65\54\x20\145\x72\162\157\x72\40\x6d\x65\x73\163\141\x67\x65\x3a\x20\45\163", $e->getMessage()); $this->coreLogger->error($errorMessage); } goto E1730; E1730: ec920: goto Cefb3; Cefb3: } public function purgeStoreRequest(\Magento\Store\Model\Store $store) { goto f5ace; b5c20: $logMessage = sprintf("\123\x74\x6f\162\x65\x20\x77\151\x74\150\40\142\141\x73\x65\40\165\x72\x6c\x3a\40\x25\163\40\x28\111\x44\72\x20\x25\x73\51\40\150\141\x73\40\142\x65\x65\x6e\40\x70\165\162\x67\145\x64", $store->getBaseUrl(), $store->getStoreId()); goto Dde51; Dde51: $this->logMessage($logMessage); goto e5dea; a92dc: $this->_sendPurgeRequest($headers); goto b5c20; f5ace: $uri = new Uri($store->getBaseUrl()); goto c8787; c8787: $headers = ["\x48\x4f\x53\124" => $uri->getHost()]; goto a92dc; e5dea: } public function purgeUrlRequest($url) { goto f961e; f961e: $uri = new Uri($url); goto Cd64e; B4677: $this->_sendPurgeRequest($headers, $uri->getPath()); goto F0691; F0691: $logMessage = sprintf("\125\162\154\x3a\40\45\x73\40\x68\x61\163\x20\x62\145\145\156\40\160\165\x72\x67\145\144", $url); goto c88a6; Cd64e: $headers = ["\110\x4f\123\x54" => $uri->getHost()]; goto B4677; c88a6: $this->logMessage($logMessage); goto cd392; cd392: } protected function _sendPurgeRequest(array $headers, $path = null) { goto e7844; A5fed: $socketAdapter->setOptions(["\164\151\x6d\145\157\165\164" => self::REQUEST_TIMEOUT]); goto A3bbf; E5331: foreach ($servers as $server) { try { goto cee7c; c1638: af2d6: goto e6837; e61da: $socketAdapter->write("\120\x55\x52\x47\105", $server, "\x31\x2e\x31", $headers); goto abc7e; cee7c: if (!(null !== $path)) { goto af2d6; } goto E1834; abc7e: $socketAdapter->close(); goto Ddf46; E1834: $server->setPath($path); goto c1638; e6837: $socketAdapter->connect($server->getHost(), $server->getPort()); goto e61da; Ddf46: } catch (\Exception $e) { goto ceecf; A4d2e: throw new \Exception($errorMessage); goto D099d; ceecf: $errorMessage = sprintf("\x41\x6e\x20\x65\162\162\x6f\x72\x20\x6f\x63\143\x75\162\x72\x65\x64\x20\x64\165\x72\x69\x6e\x67\40\160\165\162\147\x69\x6e\x67\54\40\x65\162\x72\157\162\x20\x6d\x65\x73\163\x61\x67\145\x3a\x20\42\x25\x73\42", $e->getMessage()); goto A88f5; A88f5: $this->logMessage($errorMessage, true); goto A4d2e; D099d: } adf7c: } goto d083c; e7844: $socketAdapter = $this->socketAdapterFactory->create(); goto A5fed; A3bbf: $servers = $this->getCacheServers(); goto E5331; d083c: a1e8d: goto A125a; A125a: } protected function logMessage($message, $force = false) { goto E7a2a; d405b: $this->logger->debug($message); goto a5fa7; E7a2a: $isDebugModeEnabled = $this->varnishConfig->isDebugModeEnabled(); goto ee088; ee088: if (!(true === $isDebugModeEnabled || true === $force)) { goto Cfb58; } goto d405b; a5fa7: Cfb58: goto f2a68; f2a68: } protected function getCacheServers() { goto Bb76f; Bb76f: $cacheServers = []; goto F34e3; F34e3: $serverList = $this->varnishConfig->getServerList(); goto fa2aa; C8713: D649b: goto bf76f; bf76f: return $cacheServers; goto Fb8b9; fa2aa: foreach ($serverList as $server) { goto B248a; aa628: $uri->setHost($host); goto Adf88; dc278: $uri = new Uri(); goto aa628; F4bca: $uri->setScheme("\150\164\164\160"); goto D92a2; Ee1eb: $uri->setPath("\x2f"); goto F4bca; Ff6f0: d42ef: goto b66b6; B248a: list($host, $port) = explode("\x3a", $server); goto dc278; e9216: $cacheServers[] = $uri; goto Ff6f0; D92a2: $uri->setQuery(null); goto e9216; Adf88: $uri->setPort($port); goto Ee1eb; b66b6: } goto C8713; Fb8b9: } }
